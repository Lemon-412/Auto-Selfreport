import base64
exec(base64.b64decode('aW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBiYXNlNjQKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBsb2dnaW5nCmltcG9ydCByYW5kb20KaW1wb3J0IHJlCmltcG9ydCBzeXMKCmZyb20gcHlxdWVyeSBpbXBvcnQgUHlRdWVyeQpmcm9tIHJlcXVlc3RzIGltcG9ydCBzZXNzaW9uCmZyb20gcmV0cnkgaW1wb3J0IHJldHJ5Cgpmcm9tIGNvbmZpZyBpbXBvcnQgKgoKCmNsYXNzIENsaWVudDoKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdXNlcm5hbWUsIHBhc3N3b3JkLCBkYXRlKToKICAgICAgICBzZWxmLnNlc3Npb24gPSBzZXNzaW9uKCkKICAgICAgICBzZWxmLnVzZXJuYW1lID0gdXNlcm5hbWUKICAgICAgICBzZWxmLnBhc3N3b3JkID0gcGFzc3dvcmQKICAgICAgICBzZWxmLmRhdGUgPSBkYXRlCiAgICAgICAgc2VsZi5kYXRhID0ge30KCiAgICBAcmV0cnkodHJpZXM9NSwgbG9nZ2VyPWxvZ2dpbmcpCiAgICBkZWYgbG9naW4oc2VsZik6CiAgICAgICAgc2VsZi5zZXNzaW9uLmhlYWRlcnMgPSB7fQogICAgICAgIHNlbGYuZGF0YSA9IHsndXNlcm5hbWUnOiBzZWxmLnVzZXJuYW1lLCAncGFzc3dvcmQnOiBzZWxmLnBhc3N3b3JkLCAnbG9naW5fc3VibWl0JzogJ+eZu+W9lSd9CiAgICAgICAgc2VsZi5zZXNzaW9uLnBvc3QobG9naW5VUkwsIGRhdGE9c2VsZi5kYXRhLCB0aW1lb3V0PTEwKQogICAgICAgIHJlc3AgPSBzZWxmLnNlc3Npb24uZ2V0KGhvbWVVUkwsIHRpbWVvdXQ9MTApCiAgICAgICAgYXNzZXJ0IHJlc3Auc3RhdHVzX2NvZGUgPT0gMjAwLCAnR0VUIFVSTCAlcyByZXR1cm5zICVkJyAlIChob21lVVJMLCByZXNwLnN0YXR1c19jb2RlKQogICAgICAgIGFzc2VydCAn5YGl5bq35LmL6LevJyBpbiByZXNwLnRleHQsICfnmbvlvZXlpLHotKUnCiAgICAgICAgbG9nZ2luZy5pbmZvKCfnmbvlvZXmiJDlip8nKQoKICAgIGRlZiBfX2dldF9kYXRhKHNlbGYpOgogICAgICAgIHJlc3AgPSBzZWxmLnNlc3Npb24uZ2V0KHJlcG9ydFVSTCkKICAgICAgICBkb2MgPSBQeVF1ZXJ5KHJlc3AudGV4dCkKICAgICAgICBodG1sID0gZG9jLmh0bWwoKQogICAgICAgIHp4TWF0Y2ggPSByZS5maW5kYWxsKHInZjdfc3RhdGU9ey4rPyJTZWxlY3RlZFZhbHVlIjoiKC4rPykiJywgaHRtbClbMF0KICAgICAgICBnbk1hdGNoID0gcmUuZmluZGFsbChyJ2Y4X3N0YXRlPXsuKz8iU2VsZWN0ZWRWYWx1ZSI6IiguKz8pIicsIGh0bWwpWzBdCiAgICAgICAgc2hlbmdNYXRjaCA9IHJlLmZpbmRhbGwocidmOV9zdGF0ZT17Lis/IlNlbGVjdGVkVmFsdWVBcnJheSI6XFsiKC4rPykiXScsIGh0bWwpWzBdCiAgICAgICAgc2hpTWF0Y2ggPSByZS5maW5kYWxsKHInZjEwX3N0YXRlPXsuKz8iRl9JdGVtcyI6KC4rPyksIlNlbGVjdGVkVmFsdWVBcnJheSI6XFsiKC4rPykiXScsIGh0bWwpWzBdCiAgICAgICAgeGlhbk1hdGNoID0gcmUuZmluZGFsbChyJ2YxMV9zdGF0ZT17Lis/IkZfSXRlbXMiOiguKz8pLCJTZWxlY3RlZFZhbHVlQXJyYXkiOlxbIiguKz8pIl0nLCBodG1sKVswXQogICAgICAgIHR6TWF0Y2ggPSByZS5maW5kYWxsKHInZjEyX3N0YXRlPXsuKz8iU2VsZWN0ZWRWYWx1ZSI6IiguKz8pIicsIGh0bWwpCiAgICAgICAgeHhNYXRjaCA9IHJlLmZpbmRhbGwocidmMTNfc3RhdGU9ey4rPyJUZXh0IjoiKC4rPykiJywgaHRtbClbMF0KICAgICAgICBqY01hdGNoID0gcmUuZmluZGFsbChyJ2YxNF9zdGF0ZT17Lis/IlNlbGVjdGVkVmFsdWVBcnJheSI6XFsiKC4rPykiXScsIGh0bWwpWzBdCiAgICAgICAgc3NNYXRjaCA9IHJlLmZpbmRhbGwocidmMzJfc3RhdGU9ey4rPyJTZWxlY3RlZFZhbHVlIjoiKC4rPykiJywgaHRtbCkKICAgICAgICBpZiBsZW4gKHR6TWF0Y2gpIGFuZCBsZW4gKHNzTWF0Y2gpOiAgIyDkuIrmtbcKICAgICAgICAgICAgRl9TdGF0ZSA9IGJhc2U2NC5iNjRkZWNvZGUodGVtcGxhdGVbMF0pLmRlY29kZSgpICUgKAogICAgICAgICAgICAgICAgc2VsZi5kYXRlLCB6eE1hdGNoLCBnbk1hdGNoLCBzaGVuZ01hdGNoLCAqc2hpTWF0Y2gsICp4aWFuTWF0Y2gsCiAgICAgICAgICAgICAgICB0ek1hdGNoWzBdLCB4eE1hdGNoLCBqY01hdGNoLCBzc01hdGNoWzBdKQogICAgICAgICAgICBzaGFuZ2hhaSA9IFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBGX1N0YXRlID0gYmFzZTY0LmI2NGRlY29kZSh0ZW1wbGF0ZVsxXSkuZGVjb2RlKCkgJSAoCiAgICAgICAgICAgICAgICBzZWxmLmRhdGUsIHp4TWF0Y2gsIGduTWF0Y2gsIHNoZW5nTWF0Y2gsICpzaGlNYXRjaCwgKnhpYW5NYXRjaCwgeHhNYXRjaCwgamNNYXRjaCkKICAgICAgICAgICAgc2hhbmdoYWkgPSBGYWxzZQogICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAgICdGX1N0YXRlJzogYmFzZTY0LmI2NGVuY29kZShGX1N0YXRlLmVuY29kZSgpKSwKICAgICAgICAgICAgJ19fVklFV1NUQVRFJzogZG9jLmZpbmQoJyNfX1ZJRVdTVEFURScpLmF0dHIoJ3ZhbHVlJyksCiAgICAgICAgICAgICdfX0VWRU5UVEFSR0VUJzogJ3AxJGN0bDAwJGJ0blN1Ym1pdCcsCiAgICAgICAgICAgICdfX0VWRU5UQVJHVU1FTlQnOiAnJywKICAgICAgICAgICAgJ19fVklFV1NUQVRFR0VORVJBVE9SJzogZG9jLmZpbmQoJyNfX1ZJRVdTVEFURUdFTkVSQVRPUicpLmF0dHIoJ3ZhbHVlJyksCiAgICAgICAgICAgICdwMSRDaGVuZ051byc6ICdwMSRDaGVuZ051bycsCiAgICAgICAgICAgICdwMSRCYW9TUlEnOiBzZWxmLmRhdGUsCiAgICAgICAgICAgICdwMSREYW5nUVNUWksnOiAn6Imv5aW9JywKICAgICAgICAgICAgJ3AxJFRpV2VuJzogc3RyKDM2ICsgcmFuZG9tLnJhbmRpbnQoMiwgMTApIC8gMTAuMCksCiAgICAgICAgICAgICdGX1RBUkdFVCc6ICdwMV9jdGwwMF9idG5TdWJtaXQnLAogICAgICAgICAgICAncDEkQ2VuZ0ZXSF9SaVFpJzogJycsCiAgICAgICAgICAgICdwMSRDZW5nRldIX0JlaVpodSc6ICcnLAogICAgICAgICAgICAncDEkSmllQ2h1X1JpUWknOiAnJywKICAgICAgICAgICAgJ3AxJEppZUNodV9CZWlaaHUnOiAnJywKICAgICAgICAgICAgJ3AxJFR1SldIX1JpUWknOiAnJywKICAgICAgICAgICAgJ3AxJFR1SldIX0JlaVpodSc6ICcnLAogICAgICAgICAgICAncDEkSmlhUmVuX0JlaVpodSc6ICcnLAogICAgICAgICAgICAncDEkWmFpWGlhbyc6IHp4TWF0Y2gsCiAgICAgICAgICAgICdwMSRHdW9OZWknOiBnbk1hdGNoLAogICAgICAgICAgICAncDEkZGRsU2hlbmckVmFsdWUnOiBzaGVuZ01hdGNoLAogICAgICAgICAgICAncDEkZGRsU2hlbmcnOiBzaGVuZ01hdGNoLAogICAgICAgICAgICAncDEkZGRsU2hpJFZhbHVlJzogc2hpTWF0Y2hbMV0sCiAgICAgICAgICAgICdwMSRkZGxTaGknOiBzaGlNYXRjaFsxXSwKICAgICAgICAgICAgJ3AxJGRkbFhpYW4kVmFsdWUnOiB4aWFuTWF0Y2hbMV0sCiAgICAgICAgICAgICdwMSRkZGxYaWFuJzogeGlhbk1hdGNoWzFdLAogICAgICAgICAgICAncDEkWGlhbmdYRFonOiB4eE1hdGNoLAogICAgICAgICAgICAncDEkUXVlWkhaSkMkVmFsdWUnOiBqY01hdGNoLAogICAgICAgICAgICAncDEkUXVlWkhaSkMnOiBqY01hdGNoLAogICAgICAgICAgICAncDEkRGFvWFFMWUdKJzogJycsICAjIOaXhea4uOWbveWutgogICAgICAgICAgICAncDEkRGFvWFFMWUNTJzogJycsICAjIOaXhea4uOWfjuW4ggogICAgICAgICAgICAncDEkQWRkcmVzczInOiAn5Lit5Zu9JywKICAgICAgICAgICAgJ3AxX1N1aVNNU01fQ29sbGFwc2VkJzogJ2ZhbHNlJywKICAgICAgICAgICAgJ3AxX0NvbGxhcHNlZCc6ICdmYWxzZScKICAgICAgICB9CiAgICAgICAgaWYgc2hhbmdoYWk6CiAgICAgICAgICAgIGRhdGFbJ3AxJFRvbmdaV0RMSCddID0gdHpNYXRjaFswXQogICAgICAgICAgICBkYXRhWydwMSRTdWlTTSddID0gc3NNYXRjaFswXQogICAgICAgIHJldHVybiBkYXRhCgogICAgZGVmIHJ1bihzZWxmKToKICAgICAgICByZXBvcnRfZGF0YSA9IHNlbGYuX19nZXRfZGF0YSgpCiAgICAgICAgbXNnX3BhdHRlcm4gPSByZS5jb21waWxlKHInRi5hbGVydFwoe21lc3NhZ2U6XCcoLio/KVwnLCcpCgogICAgICAgIEByZXRyeSh0cmllcz0xMCwgZGVsYXk9MSwgbWF4X2RlbGF5PTY0LCBiYWNrb2ZmPTIsIGxvZ2dlcj1sb2dnaW5nKQogICAgICAgIGRlZiBzdWJtaXQoZGF0YSk6CiAgICAgICAgICAgIHJlc3AgPSBzZWxmLnNlc3Npb24ucG9zdChyZXBvcnRVUkwsIGRhdGE9ZGF0YSwgdGltZW91dD0xMCkKICAgICAgICAgICAgYXNzZXJ0IHJlc3Auc3RhdHVzX2NvZGUgPT0gMjAwLCAnUE9TVCAlcyByZXR1cm5zICVkJyAlIChyZXBvcnRVUkwsIHJlc3Auc3RhdHVzX2NvZGUpCiAgICAgICAgICAgIG1zZyA9IG1zZ19wYXR0ZXJuLmZpbmRhbGwocmVzcC50ZXh0KVswXQogICAgICAgICAgICBhc3NlcnQgbXNnID09ICfmj5DkuqTmiJDlip8nLCBtc2cKICAgICAgICAgICAgcmV0dXJuIG1zZwoKICAgICAgICBtc2cgPSBzdWJtaXQocmVwb3J0X2RhdGEpCiAgICAgICAgbG9nZ2luZy5pbmZvKG1zZyArICc6ICcgKyByZXBvcnRfZGF0YVsncDEkVGlXZW4nXSkKCgpkZWYgYXJnX3BhcnNlcigpOgogICAgZGVmIGxvZ19sZXZlbChhcmdfdmFsdWUsIHBhdD1yZS5jb21waWxlKHInKGRlYnVnfGluZm98d2FybmluZ3xlcnJvcnxjcml0aWNhbCknLCByZS5JR05PUkVDQVNFKSk6CiAgICAgICAgaWYgbm90IHBhdC5tYXRjaChhcmdfdmFsdWUpOgogICAgICAgICAgICByYWlzZSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcgogICAgICAgIHJldHVybiBhcmdfdmFsdWUKCiAgICBwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihkZXNjcmlwdGlvbj0nU0hVIOiHquWKqOaKpeWRiiBuY292IOeahOiEmuacrOOAgicpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCd1c2VybmFtZScsIGhlbHA9J+S4gOWNoemAmui0puWPtycpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCdwYXNzd29yZCcsIGhlbHA9J+S4gOWNoemAmuWvhueggScpCiAgICBwYXJzZXIuYWRkX2FyZ3VtZW50KCctZCcsICctLWRhdGUnLCBoZWxwPSfkuIrmiqXml6XmnJ8nLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlPWxhbWJkYSBzOiBkYXRldGltZS5kYXRldGltZS5zdHJwdGltZShzLCAnJVktJW0tJWQnKS5kYXRlKCksCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ9ZGF0ZXRpbWUuZGF0ZS50b2RheSgpKQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLWwnLCAnLS1sb2dfbGV2ZWwnLCBkZWZhdWx0PSdpbmZvJywgdHlwZT1sb2dfbGV2ZWwsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9J+aXpeW/l+e6p+WIqyAoZGVidWcsIGluZm8sIHdhcm5pbmcsIGVycm9yLCBjcml0aWNhbCknKQogICAgcmV0dXJuIHBhcnNlcgoKCmRlZiBtYWluKCk6CiAgICBhcmdzID0gYXJnX3BhcnNlcigpLnBhcnNlX2FyZ3MoKQogICAgZm10ID0gIiUobGV2ZWxuYW1lKXMgJShtZXNzYWdlKXMiCiAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKHN0cmVhbT1zeXMuc3Rkb3V0LCBmb3JtYXQ9Zm10LCBsZXZlbD1ldmFsKCJsb2dnaW5nLiIgKyBhcmdzLmxvZ19sZXZlbC51cHBlcigpKSkKCiAgICBjbGllbnQgPSBDbGllbnQoYXJncy51c2VybmFtZSwgYXJncy5wYXNzd29yZCwgYXJncy5kYXRlKQogICAgdHJ5OgogICAgICAgIGNsaWVudC5sb2dpbigpCiAgICAgICAgY2xpZW50LnJ1bigpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIEVSUjoKICAgICAgICBsb2dnaW5nLmVycm9yKHN0cihFUlIpKQogICAgICAgIGV4aXQoMSkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigpCg==').decode())
